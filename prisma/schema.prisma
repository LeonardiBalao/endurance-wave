datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  firstLogin          Boolean         @default(true)
  acceptsTerms        Boolean         @default(false)
  acceptsNotification Boolean         @default(false)
  role                ROLE            @default(USER)
  // Optional for WebAuthn support
  Authenticator       Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Review    Review[]
  Comment   Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id            String        @id @default(uuid())
  name          String
  subcategories Subcategory[]
  Product       Product[]
  Review        Review[]
}

model Subcategory {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  Category   Category  @relation(fields: [categoryId], references: [id])
  Review     Review[]
  Product    Product[]
}

model Product {
  id              String      @id @default(uuid())
  categoryId      String
  subcategoryId   String
  name            String
  description     String      @db.VarChar(1000)
  metaDescription String      @db.VarChar(160)
  keywords        String[]
  characteristics String[]
  brand           String
  videoURL        String[]
  advantages      String[]
  disadvantages   String[]
  affiliateURL    String[]
  rating          Float
  likes           Int         @default(7)
  tags            String[]
  price           Float
  gender          Gender
  category        Category    @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id])
  createdAt       DateTime    @default(now())
  Image           Image[]
}

model Review {
  id            String      @id @default(uuid())
  userId        String
  categoryId    String
  subcategoryId String
  productsId    String[]
  introduction  String      @db.VarChar(300)
  title         String      @db.VarChar(60)
  description   String      @db.VarChar(160)
  keywords      String[]
  comparative   String      @db.VarChar(400)
  conclusion    String      @db.VarChar(300)
  rating        Float
  tags          String[]
  likes         Int         @default(72)
  category      Category    @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  Comment       Comment[]
  createdAt     DateTime    @default(now())
  Image         Image[]
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  content   String   @db.VarChar(160)
  likes     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
  createdAt DateTime @default(now())
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

model Image {
  id        String   @id @default(uuid())
  data      String
  alt       String
  reviewId  String?
  productId String?
  Review    Review?  @relation(fields: [reviewId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
}
