datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  firstLogin          Boolean         @default(true)
  acceptsTerms        Boolean         @default(false)
  acceptsNotification Boolean         @default(false)
  role                ROLE            @default(USER)
  // Optional for WebAuthn support
  authenticator       Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Review    Review[]
  Comment   Comment[]
  Product   Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  slug          String
  subcategories Subcategory[]
  Review        Review[]
}

model Subcategory {
  id         String   @id @default(uuid())
  name       String   @unique
  slug       String
  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Review     Review[]
}

model Brand {
  id      String    @id @default(uuid())
  slug    String
  name    String    @unique
  Product Product[]
}

model Product {
  id            String   @id @default(uuid())
  userId        String
  brandId       String
  genderId      String
  slug          String
  name          String   @unique
  mainImageURL  String
  mainImageALT  String
  description   String   @db.VarChar(160)
  keywords      String[]
  about         String   @db.VarChar(5000)
  advantages    String[]
  disadvantages String[]
  affiliateURL  String[]
  rating        Decimal  @default(5)
  likes         Int      @default(7)
  tags          String[]
  price         Decimal
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id])
  Brand         Brand    @relation(fields: [brandId], references: [id])
  Gender        Gender   @relation(fields: [genderId], references: [id])
}

model Review {
  id                   String      @id @default(uuid())
  userId               String
  categoryId           String
  subcategoryId        String
  slug                 String
  productsId           String[]
  keywords             String[]
  tags                 String[]
  rating               Float       @default(1)
  mainImageURL         String
  mainImageALT         String
  title                String      @unique @db.VarChar(60)
  description          String      @db.VarChar(160)
  introduction         String      @db.VarChar(5000)
  introductionImageURL String
  introductionImageALT String
  comparative          String      @db.VarChar(5000)
  conclusion           String      @db.VarChar(5000)
  likes                Int         @default(72)
  createdAt            DateTime    @default(now())
  Comment              Comment[]
  User                 User        @relation(fields: [userId], references: [id])
  Category             Category    @relation(fields: [categoryId], references: [id])
  Subcategory          Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  content   String   @db.VarChar(160)
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Review    Review   @relation(fields: [reviewId], references: [id])
}

model Gender {
  id      String    @id @default(uuid())
  type    String
  Product Product[]
}
